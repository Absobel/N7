(* Impl√©mentation de la fonction logarithme binaire d'un nombre entier *)

module Logarithme

  use int.Int
  use int.Power
  use ref.Refint

  let logarithme (n: int) : int
    requires { 0 < n }
    ensures  { result >= 0 && (Power.power 2 result) <= n < (Power.power 2 (result + 1)) }
  =
    let r = ref 1 in
    let v = ref 2 in
    while  (!v <= n) do
      invariant { !v <= (2 * n) && !v = (Power.power 2 !r) && n >= !v}
      variant   { (2 * n) - (!v) }
      v := 2 * (!v);
      r :=  (!r) + 1
    done;
    r := (!r) - 1;
    !r

end
