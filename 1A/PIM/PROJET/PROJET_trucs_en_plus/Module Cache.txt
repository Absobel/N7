Module Cache

TYPE T_Cache EST ENREGISTREMENT
	Liste : T_LCA  -- Cle : Destination, Valeur : T_Cellule
    Taille_Max : Entier
	Nb_Appels : Entier
	Nb_Defaut_Cache : Entier
FIN ENREGISTREMENT

TYPE T_Cellue EST ENREGISTREMENT
    Interface : Chaine de caractères
    Nb_Appels_Adresse : Entier      -- Utilisé que pour LFU.
FIN ENREGISTREMENT

________________________________

R0 : Initialiser le cache
-- Initialise une liste chaînée vide
-- Procédure
-- Nom : Initialiser
-- Paramètres : 
--     Cache : in out T_Cache
--     Taille_Max : in Entier
-- Post-condition :
--     Taille(Cache.Liste) = 0

R1 : Comment Initialiser le cache
    Initialiser(Cache.Liste)
    Cache.Taille_Max := Taille_Max
    Cache.Nb_Appels := 0
    Cache.Nb_Defaut_Cache := 0

________________________________

R0 : Afficher les statistiques du cache
-- Procédure
-- Nom : Afficher_Statistiques
-- Paramètres :
--     Cache : in T_Cache

R1 : Comment Afficher les statistiques du cache
    Ecrire("Nombre d'appels : ", Nb_Appels)
    Ecrire("Nombre de défauts de cache : ", Nb_Defaut_Cache)
    Ecrire("Taux de défauts de cache : ", Nb_Defaut_Cache / Nb_Appels)

________________________________

R0 : Afficher le cache
-- Procédure
-- Nom : Afficher
-- Paramètres :
--     Cache : in T_Cache

R1 : Comment afficher le cache
    Afficher(Cache.Liste)    -- Procédure générique du module liste chainée dérivée de la procédure Traiter

________________________________

R0 : Lire une destination dans le cache
-- Consulte le cache et retourne l'interface correspondante et un booléen indiquant si la destination est présente dans le cache
-- Procédure
-- Nom : Lire
-- Paramètres :
--     Cache : in/out T_Cache
--     Destination : in T_Destination
--     Politique : in Chaine de caractères
--     Interface : out T_Interface
--     A_Trouve : out Booléen

R1 : Comment lire une destination dans le cache
    Si Cle_Presente(Cache.Liste, Destination) alors
        Donnee : T_Cellule := La_Donnee(Cache.Liste, Destination)
        Interface := Donnee.Interface
        A_Trouve := Vrai
        Changer la position de la destination selon la politique    Cache : in/out, Destination : in
    Sinon
        A_Trouve := Faux
    Fin Si

R2 : Comment changer la position de la destination selon la politique
    Si Politique = "LRU" alors
        Déplacer en queue de liste             Cache : in/out, Destination : in
    Sinon Si Politique = "FIFO" alors
        Ne rien faire
    Sinon Si Politique = "LFU" alors
        Donnee.Nb_Appels_Adresse := Donnee.Nb_Appels_Adresse + 1
        Enregistrer(Cache.Liste, Destination, Donnee)
    Sinon
        Erreur "Politique non reconnue"
    Fin Si

R3 : Comment déplacer en queue de liste
    Supprimer(Cache.Liste, Destination)
    Ajouter_Fin(Cache.Liste, Destination, Donnee)
 
________________________________

R0 : Ajouter une destination dans le cache
-- Ajoute une destination dans le cache selon la politique
-- Procédure
-- Nom : Ajouter
-- Paramètres :
--     Cache : in out T_Cache
--     Destination : in T_Destination
--     Interface : in T_Interface
--     Politique : in Chaîne de caractères

R1 : Comment ajouter une destination dans le cache
    Cellule : T_Cellule := (Interface, 1)
    Ajouter(Cache.Liste, Destination, Cellule)
    Si Taille(Cache.Liste) >= Cache.Taille_Max alors
        Supprimer la destination selon la politique     Cache : in/out, Politique : in
    Sinon
        Ne rien faire
    Fin Si

R2 : Comment supprimer la destination selon la politique
    Si Politique = "LRU" ou Politique = "FIFO" alors
        Supprimer_Tete(Cache.Liste)
    Sinon Si Politique = "LFU" alors
        Supprimer selon le nombre d'appels     Cache : in/out
    Fin Si

R3 : Comment supprimer selon le nombre d'appels
    Min : Entier;
    Min_Destination;
    Element_Index(Cache.Liste, 1, Min_Destination, Min).Nb_Appels_Adresse
    Pour i allant de 2 à Taille(Cache.Liste) faire
        Determiner si la ieme destination a un nombre d'appels plus petit que Min_Destination       Cache : in/out, Min : in/out, Min_Destination : in/out
    Fin Pour
    Supprimer(Cache.Liste, Min_Destination)

R4 : Comment déterminer si la ieme destination a un nombre d'appels plus petit que Min_Destination
    Si La_Donnee(Cache.Liste, i).Nb_Appels_Adresse < Min alors
        Min := La_Donnee(Cache.Liste, i).Nb_Appels_Adresse
        Min_Destination := La_Cle(Cache.Liste, i)
    Fin Si
________________________________

R0 : Vider le Cache

R1 : Comment vider le cache
    Vider(Cache.Liste)
________________________________