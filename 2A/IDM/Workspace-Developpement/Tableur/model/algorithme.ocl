import 'algorithme.ecore'

package algorithme

context Catalogue 

inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	

context Algorithme 

inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
	
context AlgorithmeElement
def: catalogue(): Catalogue  =
	Catalogue.allInstances()
		->select(a | a.algorithmes->includes(self))
		->asSequence()->first()
		
context Ressource

inv fileIsPythonType:
    self.file.endsWith('.py')

inv differentInput:
    self.stdin->notEmpty() implies
        self.stdin->forAll(c1, c2 | c1 <> c2)
        
inv UnaireMeansOneInput:
    self.stdout.operation->oclIsTypeOf(tableur::OperateurUnaire) implies self.stdin->size() = 1

inv BinaireMeansTwoInputs:
    self.stdout.operation->oclIsTypeOf(tableur::OperateurBinaire) implies self.stdin->size() = 2

        

      

endpackage