/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TABGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TableurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Tableur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTablesTableParserRuleCall_3_0 = (RuleCall)cTablesAssignment_3.eContents().get(0);
		private final Assignment cCatalogueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCatalogueCatalogueParserRuleCall_4_0 = (RuleCall)cCatalogueAssignment_4.eContents().get(0);
		private final Assignment cScriptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScriptScriptParserRuleCall_5_0 = (RuleCall)cScriptAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///////////////////////////// RACINE ///////////////////////////
		//Tableur : 'Tableur' name=ID '{'
		//    tables+=Table*
		//    catalogue+=Catalogue*
		//    script+=Script*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Tableur' name=ID '{'
		//   tables+=Table*
		//   catalogue+=Catalogue*
		//   script+=Script*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Tableur'
		public Keyword getTableurKeyword_0() { return cTableurKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tables+=Table*
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_3_0() { return cTablesTableParserRuleCall_3_0; }
		
		//catalogue+=Catalogue*
		public Assignment getCatalogueAssignment_4() { return cCatalogueAssignment_4; }
		
		//Catalogue
		public RuleCall getCatalogueCatalogueParserRuleCall_4_0() { return cCatalogueCatalogueParserRuleCall_4_0; }
		
		//script+=Script*
		public Assignment getScriptAssignment_5() { return cScriptAssignment_5; }
		
		//Script
		public RuleCall getScriptScriptParserRuleCall_5_0() { return cScriptScriptParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Colonne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonneInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonneOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////////////// TABLES ///////////////////////////
		//Colonne : ColonneInput | ColonneOutput;
		@Override public ParserRule getRule() { return rule; }
		
		//ColonneInput | ColonneOutput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColonneInput
		public RuleCall getColonneInputParserRuleCall_0() { return cColonneInputParserRuleCall_0; }
		
		//ColonneOutput
		public RuleCall getColonneOutputParserRuleCall_1() { return cColonneOutputParserRuleCall_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperateurUnaireParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperateurBinaireParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation : OperateurUnaire | OperateurBinaire;
		@Override public ParserRule getRule() { return rule; }
		
		//OperateurUnaire | OperateurBinaire
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperateurUnaire
		public RuleCall getOperateurUnaireParserRuleCall_0() { return cOperateurUnaireParserRuleCall_0; }
		
		//OperateurBinaire
		public RuleCall getOperateurBinaireParserRuleCall_1() { return cOperateurBinaireParserRuleCall_1; }
	}
	public class OperateurUnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperateurUnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindOperationUnaireTypeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//OperateurUnaire : 'Operation' kind=OperationUnaireType;
		@Override public ParserRule getRule() { return rule; }
		
		//'Operation' kind=OperationUnaireType
		public Group getGroup() { return cGroup; }
		
		//'Operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//kind=OperationUnaireType
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//OperationUnaireType
		public RuleCall getKindOperationUnaireTypeEnumRuleCall_1_0() { return cKindOperationUnaireTypeEnumRuleCall_1_0; }
	}
	public class OperateurBinaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperateurBinaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindOperationBinaireTypeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//OperateurBinaire : 'Operation' kind=OperationBinaireType;
		@Override public ParserRule getRule() { return rule; }
		
		//'Operation' kind=OperationBinaireType
		public Group getGroup() { return cGroup; }
		
		//'Operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//kind=OperationBinaireType
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//OperationBinaireType
		public RuleCall getKindOperationBinaireTypeEnumRuleCall_1_0() { return cKindOperationBinaireTypeEnumRuleCall_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColonnesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColonnesColonneParserRuleCall_3_0 = (RuleCall)cColonnesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table : 'Table' name=ID '{'
		//    colonnes+=Colonne*
		//        '}'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Table' name=ID '{'
		//   colonnes+=Colonne*
		//       '}'
		public Group getGroup() { return cGroup; }
		
		//'Table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//colonnes+=Colonne*
		public Assignment getColonnesAssignment_3() { return cColonnesAssignment_3; }
		
		//Colonne
		public RuleCall getColonnesColonneParserRuleCall_3_0() { return cColonnesColonneParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ColonneInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.ColonneInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonneInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ColonneInput : 'ColonneInput' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ColonneInput' name=ID
		public Group getGroup() { return cGroup; }
		
		//'ColonneInput'
		public Keyword getColonneInputKeyword_0() { return cColonneInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ColonneOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.ColonneOutput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonneOutputKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cOperationsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOperationsOperateurBinaireParserRuleCall_0_3_0 = (RuleCall)cOperationsAssignment_0_3.eContents().get(0);
		private final Assignment cColonnesAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cColonnesColonneCrossReference_0_4_0 = (CrossReference)cColonnesAssignment_0_4.eContents().get(0);
		private final RuleCall cColonnesColonneIDTerminalRuleCall_0_4_0_1 = (RuleCall)cColonnesColonneCrossReference_0_4_0.eContents().get(1);
		private final Assignment cColonnesAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final CrossReference cColonnesColonneCrossReference_0_5_0 = (CrossReference)cColonnesAssignment_0_5.eContents().get(0);
		private final RuleCall cColonnesColonneIDTerminalRuleCall_0_5_0_1 = (RuleCall)cColonnesColonneCrossReference_0_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonneOutputKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOperationsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOperationsOperateurUnaireParserRuleCall_1_3_0 = (RuleCall)cOperationsAssignment_1_3.eContents().get(0);
		private final Assignment cColonnesAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final CrossReference cColonnesColonneCrossReference_1_4_0 = (CrossReference)cColonnesAssignment_1_4.eContents().get(0);
		private final RuleCall cColonnesColonneIDTerminalRuleCall_1_4_0_1 = (RuleCall)cColonnesColonneCrossReference_1_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//ColonneOutput : 'ColonneOutput' name=ID '{'
		//    operations+=OperateurBinaire colonnes+=[Colonne] colonnes+=[Colonne]
		//    '}'
		//    | 'ColonneOutput' name=ID '{'
		//    operations+=OperateurUnaire colonnes+=[Colonne]
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ColonneOutput' name=ID '{'
		//   operations+=OperateurBinaire colonnes+=[Colonne] colonnes+=[Colonne]
		//   '}'
		//   | 'ColonneOutput' name=ID '{'
		//   operations+=OperateurUnaire colonnes+=[Colonne]
		//   '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ColonneOutput' name=ID '{'
		//   operations+=OperateurBinaire colonnes+=[Colonne] colonnes+=[Colonne]
		//   '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ColonneOutput'
		public Keyword getColonneOutputKeyword_0_0() { return cColonneOutputKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//operations+=OperateurBinaire
		public Assignment getOperationsAssignment_0_3() { return cOperationsAssignment_0_3; }
		
		//OperateurBinaire
		public RuleCall getOperationsOperateurBinaireParserRuleCall_0_3_0() { return cOperationsOperateurBinaireParserRuleCall_0_3_0; }
		
		//colonnes+=[Colonne]
		public Assignment getColonnesAssignment_0_4() { return cColonnesAssignment_0_4; }
		
		//[Colonne]
		public CrossReference getColonnesColonneCrossReference_0_4_0() { return cColonnesColonneCrossReference_0_4_0; }
		
		//ID
		public RuleCall getColonnesColonneIDTerminalRuleCall_0_4_0_1() { return cColonnesColonneIDTerminalRuleCall_0_4_0_1; }
		
		//colonnes+=[Colonne]
		public Assignment getColonnesAssignment_0_5() { return cColonnesAssignment_0_5; }
		
		//[Colonne]
		public CrossReference getColonnesColonneCrossReference_0_5_0() { return cColonnesColonneCrossReference_0_5_0; }
		
		//ID
		public RuleCall getColonnesColonneIDTerminalRuleCall_0_5_0_1() { return cColonnesColonneIDTerminalRuleCall_0_5_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }
		
		//'ColonneOutput' name=ID '{'
		//   operations+=OperateurUnaire colonnes+=[Colonne]
		//   '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'ColonneOutput'
		public Keyword getColonneOutputKeyword_1_0() { return cColonneOutputKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//operations+=OperateurUnaire
		public Assignment getOperationsAssignment_1_3() { return cOperationsAssignment_1_3; }
		
		//OperateurUnaire
		public RuleCall getOperationsOperateurUnaireParserRuleCall_1_3_0() { return cOperationsOperateurUnaireParserRuleCall_1_3_0; }
		
		//colonnes+=[Colonne]
		public Assignment getColonnesAssignment_1_4() { return cColonnesAssignment_1_4; }
		
		//[Colonne]
		public CrossReference getColonnesColonneCrossReference_1_4_0() { return cColonnesColonneCrossReference_1_4_0; }
		
		//ID
		public RuleCall getColonnesColonneIDTerminalRuleCall_1_4_0_1() { return cColonnesColonneIDTerminalRuleCall_1_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class CatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Catalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatalogueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlgorithmesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlgorithmesAlgorithmeParserRuleCall_3_0 = (RuleCall)cAlgorithmesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///////////////////////////// CATALOGUE ///////////////////////////
		//Catalogue : 'Catalogue' name=ID '{'
		//    algorithmes+=Algorithme*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Catalogue' name=ID '{'
		//   algorithmes+=Algorithme*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Catalogue'
		public Keyword getCatalogueKeyword_0() { return cCatalogueKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//algorithmes+=Algorithme*
		public Assignment getAlgorithmesAssignment_3() { return cAlgorithmesAssignment_3; }
		
		//Algorithme
		public RuleCall getAlgorithmesAlgorithmeParserRuleCall_3_0() { return cAlgorithmesAlgorithmeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AlgorithmeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Algorithme");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlgorithmeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntreesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntreesEntreeParserRuleCall_3_0 = (RuleCall)cEntreesAssignment_3.eContents().get(0);
		private final Assignment cSortiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSortiesSortieParserRuleCall_4_0 = (RuleCall)cSortiesAssignment_4.eContents().get(0);
		private final Assignment cDocumentationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDocumentationDocumentationParserRuleCall_5_0 = (RuleCall)cDocumentationAssignment_5.eContents().get(0);
		private final Assignment cRessourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRessourceRessourceParserRuleCall_6_0 = (RuleCall)cRessourceAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Algorithme : 'Algorithme' name=ID '{'
		//    entrees+=Entree*
		//    sorties+=Sortie*
		//    documentation+=Documentation*
		//    ressource+=Ressource*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Algorithme' name=ID '{'
		//   entrees+=Entree*
		//   sorties+=Sortie*
		//   documentation+=Documentation*
		//   ressource+=Ressource*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Algorithme'
		public Keyword getAlgorithmeKeyword_0() { return cAlgorithmeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//entrees+=Entree*
		public Assignment getEntreesAssignment_3() { return cEntreesAssignment_3; }
		
		//Entree
		public RuleCall getEntreesEntreeParserRuleCall_3_0() { return cEntreesEntreeParserRuleCall_3_0; }
		
		//sorties+=Sortie*
		public Assignment getSortiesAssignment_4() { return cSortiesAssignment_4; }
		
		//Sortie
		public RuleCall getSortiesSortieParserRuleCall_4_0() { return cSortiesSortieParserRuleCall_4_0; }
		
		//documentation+=Documentation*
		public Assignment getDocumentationAssignment_5() { return cDocumentationAssignment_5; }
		
		//Documentation
		public RuleCall getDocumentationDocumentationParserRuleCall_5_0() { return cDocumentationDocumentationParserRuleCall_5_0; }
		
		//ressource+=Ressource*
		public Assignment getRessourceAssignment_6() { return cRessourceAssignment_6; }
		
		//Ressource
		public RuleCall getRessourceRessourceParserRuleCall_6_0() { return cRessourceRessourceParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EntreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Entree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntreesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametresParametreParserRuleCall_2_0 = (RuleCall)cParametresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Entree : 'Entrees' '{'
		//    parametres+=Parametre*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Entrees' '{'
		//   parametres+=Parametre*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Entrees'
		public Keyword getEntreesKeyword_0() { return cEntreesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parametres+=Parametre*
		public Assignment getParametresAssignment_2() { return cParametresAssignment_2; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_0() { return cParametresParametreParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SortieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Sortie");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametresParametreParserRuleCall_2_0 = (RuleCall)cParametresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Sortie : 'Sorties' '{'
		//    parametres+=Parametre*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sorties' '{'
		//   parametres+=Parametre*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Sorties'
		public Keyword getSortiesKeyword_0() { return cSortiesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parametres+=Parametre*
		public Assignment getParametresAssignment_2() { return cParametresAssignment_2; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_0() { return cParametresParametreParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParametreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Parametre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypePrimitifPythonEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parametre : name=ID ':' type=TypePrimitifPython;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=TypePrimitifPython
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypePrimitifPython
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypePrimitifPython
		public RuleCall getTypeTypePrimitifPythonEnumRuleCall_2_0() { return cTypeTypePrimitifPythonEnumRuleCall_2_0; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDocumentationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTexteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTexteSTRINGTerminalRuleCall_1_0 = (RuleCall)cTexteAssignment_1.eContents().get(0);
		
		//Documentation : 'Documentation' texte=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Documentation' texte=STRING
		public Group getGroup() { return cGroup; }
		
		//'Documentation'
		public Keyword getDocumentationKeyword_0() { return cDocumentationKeyword_0; }
		
		//texte=STRING
		public Assignment getTexteAssignment_1() { return cTexteAssignment_1; }
		
		//STRING
		public RuleCall getTexteSTRINGTerminalRuleCall_1_0() { return cTexteSTRINGTerminalRuleCall_1_0; }
	}
	public class RessourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Ressource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRessourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheminAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheminSTRINGTerminalRuleCall_1_0 = (RuleCall)cCheminAssignment_1.eContents().get(0);
		
		//Ressource : 'Ressource' chemin=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ressource' chemin=STRING
		public Group getGroup() { return cGroup; }
		
		//'Ressource'
		public Keyword getRessourceKeyword_0() { return cRessourceKeyword_0; }
		
		//chemin=STRING
		public Assignment getCheminAssignment_1() { return cCheminAssignment_1; }
		
		//STRING
		public RuleCall getCheminSTRINGTerminalRuleCall_1_0() { return cCheminSTRINGTerminalRuleCall_1_0; }
	}
	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntreesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntreesEntreeScriptParserRuleCall_3_0 = (RuleCall)cEntreesAssignment_3.eContents().get(0);
		private final Assignment cSortiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSortiesSortieScriptParserRuleCall_4_0 = (RuleCall)cSortiesAssignment_4.eContents().get(0);
		private final Assignment cCalculsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCalculsCalculParserRuleCall_5_0 = (RuleCall)cCalculsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///////////////////////////// SCRIPT  ///////////////////////////
		//Script : 'Script' name=ID '{'
		//    entrees+=EntreeScript
		//    sorties+=SortieScript
		//    calculs+=Calcul
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Script' name=ID '{'
		//   entrees+=EntreeScript
		//   sorties+=SortieScript
		//   calculs+=Calcul
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Script'
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//entrees+=EntreeScript
		public Assignment getEntreesAssignment_3() { return cEntreesAssignment_3; }
		
		//EntreeScript
		public RuleCall getEntreesEntreeScriptParserRuleCall_3_0() { return cEntreesEntreeScriptParserRuleCall_3_0; }
		
		//sorties+=SortieScript
		public Assignment getSortiesAssignment_4() { return cSortiesAssignment_4; }
		
		//SortieScript
		public RuleCall getSortiesSortieScriptParserRuleCall_4_0() { return cSortiesSortieScriptParserRuleCall_4_0; }
		
		//calculs+=Calcul
		public Assignment getCalculsAssignment_5() { return cCalculsAssignment_5; }
		
		//Calcul
		public RuleCall getCalculsCalculParserRuleCall_5_0() { return cCalculsCalculParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EntreeScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.EntreeScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntreesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametresParametreParserRuleCall_2_0 = (RuleCall)cParametresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EntreeScript : 'Entrees' '{'
		//        parametres+=Parametre*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Entrees' '{'
		//       parametres+=Parametre*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Entrees'
		public Keyword getEntreesKeyword_0() { return cEntreesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parametres+=Parametre*
		public Assignment getParametresAssignment_2() { return cParametresAssignment_2; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_0() { return cParametresParametreParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SortieScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.SortieScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametresParametreParserRuleCall_2_0 = (RuleCall)cParametresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SortieScript : 'Sorties' '{'
		//        parametres+=Parametre*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Sorties' '{'
		//       parametres+=Parametre*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Sorties'
		public Keyword getSortiesKeyword_0() { return cSortiesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//parametres+=Parametre*
		public Assignment getParametresAssignment_2() { return cParametresAssignment_2; }
		
		//Parametre
		public RuleCall getParametresParametreParserRuleCall_2_0() { return cParametresParametreParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class OperationScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperationScript");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationUnaireScriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationBinaireScriptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationScript : OperationUnaireScript | OperationBinaireScript;
		@Override public ParserRule getRule() { return rule; }
		
		//OperationUnaireScript | OperationBinaireScript
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OperationUnaireScript
		public RuleCall getOperationUnaireScriptParserRuleCall_0() { return cOperationUnaireScriptParserRuleCall_0; }
		
		//OperationBinaireScript
		public RuleCall getOperationBinaireScriptParserRuleCall_1() { return cOperationBinaireScriptParserRuleCall_1; }
	}
	public class OperationUnaireScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperationUnaireScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationOperateurUnaireTypeEnumRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandsOperandParserRuleCall_2_0 = (RuleCall)cOperandsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationUnaireScript : operation=OperateurUnaireType '('operands+=Operand')';
		@Override public ParserRule getRule() { return rule; }
		
		//operation=OperateurUnaireType '('operands+=Operand')'
		public Group getGroup() { return cGroup; }
		
		//operation=OperateurUnaireType
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//OperateurUnaireType
		public RuleCall getOperationOperateurUnaireTypeEnumRuleCall_0_0() { return cOperationOperateurUnaireTypeEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operands+=Operand
		public Assignment getOperandsAssignment_2() { return cOperandsAssignment_2; }
		
		//Operand
		public RuleCall getOperandsOperandParserRuleCall_2_0() { return cOperandsOperandParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperationBinaireScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperationBinaireScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationOperateurBinaireTypeEnumRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandOperandParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOperandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperandOperandParserRuleCall_4_0 = (RuleCall)cOperandAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperationBinaireScript : operation=OperateurBinaireType '('operand+=Operand','operand+=Operand')';
		@Override public ParserRule getRule() { return rule; }
		
		//operation=OperateurBinaireType '('operand+=Operand','operand+=Operand')'
		public Group getGroup() { return cGroup; }
		
		//operation=OperateurBinaireType
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//OperateurBinaireType
		public RuleCall getOperationOperateurBinaireTypeEnumRuleCall_0_0() { return cOperationOperateurBinaireTypeEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operand+=Operand
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//Operand
		public RuleCall getOperandOperandParserRuleCall_2_0() { return cOperandOperandParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//operand+=Operand
		public Assignment getOperandAssignment_4() { return cOperandAssignment_4; }
		
		//Operand
		public RuleCall getOperandOperandParserRuleCall_4_0() { return cOperandOperandParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOperationScriptParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operand : {Operand} ID | {Operand} INT | OperationScript;
		@Override public ParserRule getRule() { return rule; }
		
		//{Operand} ID | {Operand} INT | OperationScript
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Operand} ID
		public Group getGroup_0() { return cGroup_0; }
		
		//{Operand}
		public Action getOperandAction_0_0() { return cOperandAction_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//{Operand} INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Operand}
		public Action getOperandAction_1_0() { return cOperandAction_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//OperationScript
		public RuleCall getOperationScriptParserRuleCall_2() { return cOperationScriptParserRuleCall_2; }
	}
	public class CalculElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.Calcul");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCalculKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationOperationScriptParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Calcul : 'Calcul' '{'
		//    Operation+=OperationScript
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Calcul' '{'
		//   Operation+=OperationScript
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'Calcul'
		public Keyword getCalculKeyword_0() { return cCalculKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//Operation+=OperationScript
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//OperationScript
		public RuleCall getOperationOperationScriptParserRuleCall_2_0() { return cOperationOperationScriptParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	public class OperationUnaireTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperationUnaireType");
		private final EnumLiteralDeclaration cOpposeEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOpposeOpposeKeyword_0 = (Keyword)cOpposeEnumLiteralDeclaration.eContents().get(0);
		
		//enum OperationUnaireType :
		//    Oppose='Oppose'
		//    ;
		public EnumRule getRule() { return rule; }
		
		//Oppose='Oppose'
		public EnumLiteralDeclaration getOpposeEnumLiteralDeclaration() { return cOpposeEnumLiteralDeclaration; }
		
		//'Oppose'
		public Keyword getOpposeOpposeKeyword_0() { return cOpposeOpposeKeyword_0; }
	}
	public class OperationBinaireTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperationBinaireType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdditionAdditionKeyword_0_0 = (Keyword)cAdditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSoustractionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSoustractionSoustractionKeyword_1_0 = (Keyword)cSoustractionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMultiplicationMultiplicationKeyword_2_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDivisionEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDivisionDivisionKeyword_3_0 = (Keyword)cDivisionEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OperationBinaireType :
		//    Addition='Addition'
		//    |Soustraction='Soustraction'
		//    |Multiplication='Multiplication'
		//    |Division='Division'
		//;
		public EnumRule getRule() { return rule; }
		
		//Addition='Addition'
		//|Soustraction='Soustraction'
		//|Multiplication='Multiplication'
		//|Division='Division'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Addition='Addition'
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_0() { return cAdditionEnumLiteralDeclaration_0; }
		
		//'Addition'
		public Keyword getAdditionAdditionKeyword_0_0() { return cAdditionAdditionKeyword_0_0; }
		
		//Soustraction='Soustraction'
		public EnumLiteralDeclaration getSoustractionEnumLiteralDeclaration_1() { return cSoustractionEnumLiteralDeclaration_1; }
		
		//'Soustraction'
		public Keyword getSoustractionSoustractionKeyword_1_0() { return cSoustractionSoustractionKeyword_1_0; }
		
		//Multiplication='Multiplication'
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_2() { return cMultiplicationEnumLiteralDeclaration_2; }
		
		//'Multiplication'
		public Keyword getMultiplicationMultiplicationKeyword_2_0() { return cMultiplicationMultiplicationKeyword_2_0; }
		
		//Division='Division'
		public EnumLiteralDeclaration getDivisionEnumLiteralDeclaration_3() { return cDivisionEnumLiteralDeclaration_3; }
		
		//'Division'
		public Keyword getDivisionDivisionKeyword_3_0() { return cDivisionDivisionKeyword_3_0; }
	}
	public class TypePrimitifPythonElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.TypePrimitifPython");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFloatFloatKeyword_1_0 = (Keyword)cFloatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStrEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStrStrKeyword_2_0 = (Keyword)cStrEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBoolBoolKeyword_3_0 = (Keyword)cBoolEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cListEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cListListKeyword_4_0 = (Keyword)cListEnumLiteralDeclaration_4.eContents().get(0);
		
		//// à remplir/modif
		//enum TypePrimitifPython :
		//     int
		//    |float
		//    |str
		//    |bool
		//    |list
		//;
		public EnumRule getRule() { return rule; }
		
		// int
		//|float
		//|str
		//|bool
		//|list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_1() { return cFloatEnumLiteralDeclaration_1; }
		
		public Keyword getFloatFloatKeyword_1_0() { return cFloatFloatKeyword_1_0; }
		
		//str
		public EnumLiteralDeclaration getStrEnumLiteralDeclaration_2() { return cStrEnumLiteralDeclaration_2; }
		
		public Keyword getStrStrKeyword_2_0() { return cStrStrKeyword_2_0; }
		
		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_3() { return cBoolEnumLiteralDeclaration_3; }
		
		public Keyword getBoolBoolKeyword_3_0() { return cBoolBoolKeyword_3_0; }
		
		//list
		public EnumLiteralDeclaration getListEnumLiteralDeclaration_4() { return cListEnumLiteralDeclaration_4; }
		
		public Keyword getListListKeyword_4_0() { return cListListKeyword_4_0; }
	}
	public class OperateurBinaireTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperateurBinaireType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDAddKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBSubKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTIMTimKeyword_2_0 = (Keyword)cTIMEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVDivKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMAXMaxKeyword_5_0 = (Keyword)cMAXEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum OperateurBinaireType :
		//     ADD = "Add"
		//    |SUB = "Sub"
		//    |TIM = "Tim"
		//    |DIV = "Div"
		//    |MIN = "Min"
		//    |MAX = "Max"
		//;
		public EnumRule getRule() { return rule; }
		
		// ADD = "Add"
		//|SUB = "Sub"
		//|TIM = "Tim"
		//|DIV = "Div"
		//|MIN = "Min"
		//|MAX = "Max"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD = "Add"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//"Add"
		public Keyword getADDAddKeyword_0_0() { return cADDAddKeyword_0_0; }
		
		//SUB = "Sub"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//"Sub"
		public Keyword getSUBSubKeyword_1_0() { return cSUBSubKeyword_1_0; }
		
		//TIM = "Tim"
		public EnumLiteralDeclaration getTIMEnumLiteralDeclaration_2() { return cTIMEnumLiteralDeclaration_2; }
		
		//"Tim"
		public Keyword getTIMTimKeyword_2_0() { return cTIMTimKeyword_2_0; }
		
		//DIV = "Div"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }
		
		//"Div"
		public Keyword getDIVDivKeyword_3_0() { return cDIVDivKeyword_3_0; }
		
		//MIN = "Min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }
		
		//"Min"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }
		
		//MAX = "Max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_5() { return cMAXEnumLiteralDeclaration_5; }
		
		//"Max"
		public Keyword getMAXMaxKeyword_5_0() { return cMAXMaxKeyword_5_0; }
	}
	public class OperateurUnaireTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.TAB.OperateurUnaireType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOPPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOPPOppKeyword_0_0 = (Keyword)cOPPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINVInvKeyword_1_0 = (Keyword)cINVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOSCosKeyword_2_0 = (Keyword)cCOSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSINEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSINSinKeyword_3_0 = (Keyword)cSINEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSQREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSQRSqrKeyword_4_0 = (Keyword)cSQREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEXPEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEXPExpKeyword_5_0 = (Keyword)cEXPEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLOGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLOGLogKeyword_6_0 = (Keyword)cLOGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCONSTConstKeyword_7_0 = (Keyword)cCONSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum OperateurUnaireType :
		//     OPP = "Opp"
		//    |INV = "Inv"
		//    |COS = "Cos"
		//    |SIN = "Sin"
		//    |SQR = "Sqr"
		//    |EXP = "Exp"
		//    |LOG = "Log"
		//    |CONST = "Const"
		//;
		public EnumRule getRule() { return rule; }
		
		// OPP = "Opp"
		//|INV = "Inv"
		//|COS = "Cos"
		//|SIN = "Sin"
		//|SQR = "Sqr"
		//|EXP = "Exp"
		//|LOG = "Log"
		//|CONST = "Const"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OPP = "Opp"
		public EnumLiteralDeclaration getOPPEnumLiteralDeclaration_0() { return cOPPEnumLiteralDeclaration_0; }
		
		//"Opp"
		public Keyword getOPPOppKeyword_0_0() { return cOPPOppKeyword_0_0; }
		
		//INV = "Inv"
		public EnumLiteralDeclaration getINVEnumLiteralDeclaration_1() { return cINVEnumLiteralDeclaration_1; }
		
		//"Inv"
		public Keyword getINVInvKeyword_1_0() { return cINVInvKeyword_1_0; }
		
		//COS = "Cos"
		public EnumLiteralDeclaration getCOSEnumLiteralDeclaration_2() { return cCOSEnumLiteralDeclaration_2; }
		
		//"Cos"
		public Keyword getCOSCosKeyword_2_0() { return cCOSCosKeyword_2_0; }
		
		//SIN = "Sin"
		public EnumLiteralDeclaration getSINEnumLiteralDeclaration_3() { return cSINEnumLiteralDeclaration_3; }
		
		//"Sin"
		public Keyword getSINSinKeyword_3_0() { return cSINSinKeyword_3_0; }
		
		//SQR = "Sqr"
		public EnumLiteralDeclaration getSQREnumLiteralDeclaration_4() { return cSQREnumLiteralDeclaration_4; }
		
		//"Sqr"
		public Keyword getSQRSqrKeyword_4_0() { return cSQRSqrKeyword_4_0; }
		
		//EXP = "Exp"
		public EnumLiteralDeclaration getEXPEnumLiteralDeclaration_5() { return cEXPEnumLiteralDeclaration_5; }
		
		//"Exp"
		public Keyword getEXPExpKeyword_5_0() { return cEXPExpKeyword_5_0; }
		
		//LOG = "Log"
		public EnumLiteralDeclaration getLOGEnumLiteralDeclaration_6() { return cLOGEnumLiteralDeclaration_6; }
		
		//"Log"
		public Keyword getLOGLogKeyword_6_0() { return cLOGLogKeyword_6_0; }
		
		//CONST = "Const"
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_7() { return cCONSTEnumLiteralDeclaration_7; }
		
		//"Const"
		public Keyword getCONSTConstKeyword_7_0() { return cCONSTConstKeyword_7_0; }
	}
	
	private final TableurElements pTableur;
	private final ColonneElements pColonne;
	private final OperationElements pOperation;
	private final OperateurUnaireElements pOperateurUnaire;
	private final OperateurBinaireElements pOperateurBinaire;
	private final OperationUnaireTypeElements eOperationUnaireType;
	private final OperationBinaireTypeElements eOperationBinaireType;
	private final TableElements pTable;
	private final ColonneInputElements pColonneInput;
	private final ColonneOutputElements pColonneOutput;
	private final CatalogueElements pCatalogue;
	private final AlgorithmeElements pAlgorithme;
	private final EntreeElements pEntree;
	private final SortieElements pSortie;
	private final ParametreElements pParametre;
	private final TypePrimitifPythonElements eTypePrimitifPython;
	private final DocumentationElements pDocumentation;
	private final RessourceElements pRessource;
	private final ScriptElements pScript;
	private final EntreeScriptElements pEntreeScript;
	private final SortieScriptElements pSortieScript;
	private final OperateurBinaireTypeElements eOperateurBinaireType;
	private final OperateurUnaireTypeElements eOperateurUnaireType;
	private final OperationScriptElements pOperationScript;
	private final OperationUnaireScriptElements pOperationUnaireScript;
	private final OperationBinaireScriptElements pOperationBinaireScript;
	private final OperandElements pOperand;
	private final CalculElements pCalcul;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TABGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTableur = new TableurElements();
		this.pColonne = new ColonneElements();
		this.pOperation = new OperationElements();
		this.pOperateurUnaire = new OperateurUnaireElements();
		this.pOperateurBinaire = new OperateurBinaireElements();
		this.eOperationUnaireType = new OperationUnaireTypeElements();
		this.eOperationBinaireType = new OperationBinaireTypeElements();
		this.pTable = new TableElements();
		this.pColonneInput = new ColonneInputElements();
		this.pColonneOutput = new ColonneOutputElements();
		this.pCatalogue = new CatalogueElements();
		this.pAlgorithme = new AlgorithmeElements();
		this.pEntree = new EntreeElements();
		this.pSortie = new SortieElements();
		this.pParametre = new ParametreElements();
		this.eTypePrimitifPython = new TypePrimitifPythonElements();
		this.pDocumentation = new DocumentationElements();
		this.pRessource = new RessourceElements();
		this.pScript = new ScriptElements();
		this.pEntreeScript = new EntreeScriptElements();
		this.pSortieScript = new SortieScriptElements();
		this.eOperateurBinaireType = new OperateurBinaireTypeElements();
		this.eOperateurUnaireType = new OperateurUnaireTypeElements();
		this.pOperationScript = new OperationScriptElements();
		this.pOperationUnaireScript = new OperationUnaireScriptElements();
		this.pOperationBinaireScript = new OperationBinaireScriptElements();
		this.pOperand = new OperandElements();
		this.pCalcul = new CalculElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.TAB".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///////////////////////////// RACINE ///////////////////////////
	//Tableur : 'Tableur' name=ID '{'
	//    tables+=Table*
	//    catalogue+=Catalogue*
	//    script+=Script*
	//    '}'
	//    ;
	public TableurElements getTableurAccess() {
		return pTableur;
	}
	
	public ParserRule getTableurRule() {
		return getTableurAccess().getRule();
	}
	
	///////////////////////////// TABLES ///////////////////////////
	//Colonne : ColonneInput | ColonneOutput;
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//Operation : OperateurUnaire | OperateurBinaire;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//OperateurUnaire : 'Operation' kind=OperationUnaireType;
	public OperateurUnaireElements getOperateurUnaireAccess() {
		return pOperateurUnaire;
	}
	
	public ParserRule getOperateurUnaireRule() {
		return getOperateurUnaireAccess().getRule();
	}
	
	//OperateurBinaire : 'Operation' kind=OperationBinaireType;
	public OperateurBinaireElements getOperateurBinaireAccess() {
		return pOperateurBinaire;
	}
	
	public ParserRule getOperateurBinaireRule() {
		return getOperateurBinaireAccess().getRule();
	}
	
	//enum OperationUnaireType :
	//    Oppose='Oppose'
	//    ;
	public OperationUnaireTypeElements getOperationUnaireTypeAccess() {
		return eOperationUnaireType;
	}
	
	public EnumRule getOperationUnaireTypeRule() {
		return getOperationUnaireTypeAccess().getRule();
	}
	
	//enum OperationBinaireType :
	//    Addition='Addition'
	//    |Soustraction='Soustraction'
	//    |Multiplication='Multiplication'
	//    |Division='Division'
	//;
	public OperationBinaireTypeElements getOperationBinaireTypeAccess() {
		return eOperationBinaireType;
	}
	
	public EnumRule getOperationBinaireTypeRule() {
		return getOperationBinaireTypeAccess().getRule();
	}
	
	//Table : 'Table' name=ID '{'
	//    colonnes+=Colonne*
	//        '}'
	//        ;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//ColonneInput : 'ColonneInput' name=ID;
	public ColonneInputElements getColonneInputAccess() {
		return pColonneInput;
	}
	
	public ParserRule getColonneInputRule() {
		return getColonneInputAccess().getRule();
	}
	
	//ColonneOutput : 'ColonneOutput' name=ID '{'
	//    operations+=OperateurBinaire colonnes+=[Colonne] colonnes+=[Colonne]
	//    '}'
	//    | 'ColonneOutput' name=ID '{'
	//    operations+=OperateurUnaire colonnes+=[Colonne]
	//    '}'
	//    ;
	public ColonneOutputElements getColonneOutputAccess() {
		return pColonneOutput;
	}
	
	public ParserRule getColonneOutputRule() {
		return getColonneOutputAccess().getRule();
	}
	
	///////////////////////////// CATALOGUE ///////////////////////////
	//Catalogue : 'Catalogue' name=ID '{'
	//    algorithmes+=Algorithme*
	//    '}';
	public CatalogueElements getCatalogueAccess() {
		return pCatalogue;
	}
	
	public ParserRule getCatalogueRule() {
		return getCatalogueAccess().getRule();
	}
	
	//Algorithme : 'Algorithme' name=ID '{'
	//    entrees+=Entree*
	//    sorties+=Sortie*
	//    documentation+=Documentation*
	//    ressource+=Ressource*
	//    '}'
	//;
	public AlgorithmeElements getAlgorithmeAccess() {
		return pAlgorithme;
	}
	
	public ParserRule getAlgorithmeRule() {
		return getAlgorithmeAccess().getRule();
	}
	
	//Entree : 'Entrees' '{'
	//    parametres+=Parametre*
	//    '}';
	public EntreeElements getEntreeAccess() {
		return pEntree;
	}
	
	public ParserRule getEntreeRule() {
		return getEntreeAccess().getRule();
	}
	
	//Sortie : 'Sorties' '{'
	//    parametres+=Parametre*
	//    '}';
	public SortieElements getSortieAccess() {
		return pSortie;
	}
	
	public ParserRule getSortieRule() {
		return getSortieAccess().getRule();
	}
	
	//Parametre : name=ID ':' type=TypePrimitifPython;
	public ParametreElements getParametreAccess() {
		return pParametre;
	}
	
	public ParserRule getParametreRule() {
		return getParametreAccess().getRule();
	}
	
	//// à remplir/modif
	//enum TypePrimitifPython :
	//     int
	//    |float
	//    |str
	//    |bool
	//    |list
	//;
	public TypePrimitifPythonElements getTypePrimitifPythonAccess() {
		return eTypePrimitifPython;
	}
	
	public EnumRule getTypePrimitifPythonRule() {
		return getTypePrimitifPythonAccess().getRule();
	}
	
	//Documentation : 'Documentation' texte=STRING;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//Ressource : 'Ressource' chemin=STRING;
	public RessourceElements getRessourceAccess() {
		return pRessource;
	}
	
	public ParserRule getRessourceRule() {
		return getRessourceAccess().getRule();
	}
	
	///////////////////////////// SCRIPT  ///////////////////////////
	//Script : 'Script' name=ID '{'
	//    entrees+=EntreeScript
	//    sorties+=SortieScript
	//    calculs+=Calcul
	//    '}'
	//    ;
	public ScriptElements getScriptAccess() {
		return pScript;
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}
	
	//EntreeScript : 'Entrees' '{'
	//        parametres+=Parametre*
	//    '}'
	//    ;
	public EntreeScriptElements getEntreeScriptAccess() {
		return pEntreeScript;
	}
	
	public ParserRule getEntreeScriptRule() {
		return getEntreeScriptAccess().getRule();
	}
	
	//SortieScript : 'Sorties' '{'
	//        parametres+=Parametre*
	//    '}'
	//    ;
	public SortieScriptElements getSortieScriptAccess() {
		return pSortieScript;
	}
	
	public ParserRule getSortieScriptRule() {
		return getSortieScriptAccess().getRule();
	}
	
	//enum OperateurBinaireType :
	//     ADD = "Add"
	//    |SUB = "Sub"
	//    |TIM = "Tim"
	//    |DIV = "Div"
	//    |MIN = "Min"
	//    |MAX = "Max"
	//;
	public OperateurBinaireTypeElements getOperateurBinaireTypeAccess() {
		return eOperateurBinaireType;
	}
	
	public EnumRule getOperateurBinaireTypeRule() {
		return getOperateurBinaireTypeAccess().getRule();
	}
	
	//enum OperateurUnaireType :
	//     OPP = "Opp"
	//    |INV = "Inv"
	//    |COS = "Cos"
	//    |SIN = "Sin"
	//    |SQR = "Sqr"
	//    |EXP = "Exp"
	//    |LOG = "Log"
	//    |CONST = "Const"
	//;
	public OperateurUnaireTypeElements getOperateurUnaireTypeAccess() {
		return eOperateurUnaireType;
	}
	
	public EnumRule getOperateurUnaireTypeRule() {
		return getOperateurUnaireTypeAccess().getRule();
	}
	
	//OperationScript : OperationUnaireScript | OperationBinaireScript;
	public OperationScriptElements getOperationScriptAccess() {
		return pOperationScript;
	}
	
	public ParserRule getOperationScriptRule() {
		return getOperationScriptAccess().getRule();
	}
	
	//OperationUnaireScript : operation=OperateurUnaireType '('operands+=Operand')';
	public OperationUnaireScriptElements getOperationUnaireScriptAccess() {
		return pOperationUnaireScript;
	}
	
	public ParserRule getOperationUnaireScriptRule() {
		return getOperationUnaireScriptAccess().getRule();
	}
	
	//OperationBinaireScript : operation=OperateurBinaireType '('operand+=Operand','operand+=Operand')';
	public OperationBinaireScriptElements getOperationBinaireScriptAccess() {
		return pOperationBinaireScript;
	}
	
	public ParserRule getOperationBinaireScriptRule() {
		return getOperationBinaireScriptAccess().getRule();
	}
	
	//Operand : {Operand} ID | {Operand} INT | OperationScript;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Calcul : 'Calcul' '{'
	//    Operation+=OperationScript
	//    '}'
	//;
	public CalculElements getCalculAccess() {
		return pCalcul;
	}
	
	public ParserRule getCalculRule() {
		return getCalculAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
