/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.tAB.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.tAB.Colonne;
import org.xtext.example.mydsl.tAB.ColonneOutput;
import org.xtext.example.mydsl.tAB.Operation;
import org.xtext.example.mydsl.tAB.TABPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Colonne Output</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.ColonneOutputImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.ColonneOutputImpl#getColonnes <em>Colonnes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ColonneOutputImpl extends ColonneImpl implements ColonneOutput
{
  /**
   * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperations()
   * @generated
   * @ordered
   */
  protected EList<Operation> operations;

  /**
   * The cached value of the '{@link #getColonnes() <em>Colonnes</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColonnes()
   * @generated
   * @ordered
   */
  protected EList<Colonne> colonnes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColonneOutputImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TABPackage.Literals.COLONNE_OUTPUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Operation> getOperations()
  {
    if (operations == null)
    {
      operations = new EObjectContainmentEList<Operation>(Operation.class, this, TABPackage.COLONNE_OUTPUT__OPERATIONS);
    }
    return operations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Colonne> getColonnes()
  {
    if (colonnes == null)
    {
      colonnes = new EObjectResolvingEList<Colonne>(Colonne.class, this, TABPackage.COLONNE_OUTPUT__COLONNES);
    }
    return colonnes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TABPackage.COLONNE_OUTPUT__OPERATIONS:
        return ((InternalEList<?>)getOperations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TABPackage.COLONNE_OUTPUT__OPERATIONS:
        return getOperations();
      case TABPackage.COLONNE_OUTPUT__COLONNES:
        return getColonnes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TABPackage.COLONNE_OUTPUT__OPERATIONS:
        getOperations().clear();
        getOperations().addAll((Collection<? extends Operation>)newValue);
        return;
      case TABPackage.COLONNE_OUTPUT__COLONNES:
        getColonnes().clear();
        getColonnes().addAll((Collection<? extends Colonne>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TABPackage.COLONNE_OUTPUT__OPERATIONS:
        getOperations().clear();
        return;
      case TABPackage.COLONNE_OUTPUT__COLONNES:
        getColonnes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TABPackage.COLONNE_OUTPUT__OPERATIONS:
        return operations != null && !operations.isEmpty();
      case TABPackage.COLONNE_OUTPUT__COLONNES:
        return colonnes != null && !colonnes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ColonneOutputImpl
