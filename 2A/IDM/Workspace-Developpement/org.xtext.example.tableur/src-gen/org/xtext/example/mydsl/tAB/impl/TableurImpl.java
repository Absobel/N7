/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.tAB.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.tAB.Catalogue;
import org.xtext.example.mydsl.tAB.Script;
import org.xtext.example.mydsl.tAB.TABPackage;
import org.xtext.example.mydsl.tAB.Table;
import org.xtext.example.mydsl.tAB.Tableur;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tableur</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.TableurImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.TableurImpl#getTables <em>Tables</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.TableurImpl#getCatalogue <em>Catalogue</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.tAB.impl.TableurImpl#getScript <em>Script</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TableurImpl extends MinimalEObjectImpl.Container implements Tableur
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTables() <em>Tables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTables()
   * @generated
   * @ordered
   */
  protected EList<Table> tables;

  /**
   * The cached value of the '{@link #getCatalogue() <em>Catalogue</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCatalogue()
   * @generated
   * @ordered
   */
  protected EList<Catalogue> catalogue;

  /**
   * The cached value of the '{@link #getScript() <em>Script</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScript()
   * @generated
   * @ordered
   */
  protected EList<Script> script;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableurImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TABPackage.Literals.TABLEUR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TABPackage.TABLEUR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Table> getTables()
  {
    if (tables == null)
    {
      tables = new EObjectContainmentEList<Table>(Table.class, this, TABPackage.TABLEUR__TABLES);
    }
    return tables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Catalogue> getCatalogue()
  {
    if (catalogue == null)
    {
      catalogue = new EObjectContainmentEList<Catalogue>(Catalogue.class, this, TABPackage.TABLEUR__CATALOGUE);
    }
    return catalogue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Script> getScript()
  {
    if (script == null)
    {
      script = new EObjectContainmentEList<Script>(Script.class, this, TABPackage.TABLEUR__SCRIPT);
    }
    return script;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TABPackage.TABLEUR__TABLES:
        return ((InternalEList<?>)getTables()).basicRemove(otherEnd, msgs);
      case TABPackage.TABLEUR__CATALOGUE:
        return ((InternalEList<?>)getCatalogue()).basicRemove(otherEnd, msgs);
      case TABPackage.TABLEUR__SCRIPT:
        return ((InternalEList<?>)getScript()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TABPackage.TABLEUR__NAME:
        return getName();
      case TABPackage.TABLEUR__TABLES:
        return getTables();
      case TABPackage.TABLEUR__CATALOGUE:
        return getCatalogue();
      case TABPackage.TABLEUR__SCRIPT:
        return getScript();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TABPackage.TABLEUR__NAME:
        setName((String)newValue);
        return;
      case TABPackage.TABLEUR__TABLES:
        getTables().clear();
        getTables().addAll((Collection<? extends Table>)newValue);
        return;
      case TABPackage.TABLEUR__CATALOGUE:
        getCatalogue().clear();
        getCatalogue().addAll((Collection<? extends Catalogue>)newValue);
        return;
      case TABPackage.TABLEUR__SCRIPT:
        getScript().clear();
        getScript().addAll((Collection<? extends Script>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TABPackage.TABLEUR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TABPackage.TABLEUR__TABLES:
        getTables().clear();
        return;
      case TABPackage.TABLEUR__CATALOGUE:
        getCatalogue().clear();
        return;
      case TABPackage.TABLEUR__SCRIPT:
        getScript().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TABPackage.TABLEUR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TABPackage.TABLEUR__TABLES:
        return tables != null && !tables.isEmpty();
      case TABPackage.TABLEUR__CATALOGUE:
        return catalogue != null && !catalogue.isEmpty();
      case TABPackage.TABLEUR__SCRIPT:
        return script != null && !script.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //TableurImpl
