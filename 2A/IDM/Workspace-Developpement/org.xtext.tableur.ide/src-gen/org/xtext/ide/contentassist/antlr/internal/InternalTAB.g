/*
 * generated by Xtext 2.32.0
 */
grammar InternalTAB;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.TABGrammarAccess;

}
@parser::members {
	private TABGrammarAccess grammarAccess;

	public void setGrammarAccess(TABGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTableur
entryRuleTableur
:
{ before(grammarAccess.getTableurRule()); }
	 ruleTableur
{ after(grammarAccess.getTableurRule()); } 
	 EOF 
;

// Rule Tableur
ruleTableur 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableurAccess().getGroup()); }
		(rule__Tableur__Group__0)
		{ after(grammarAccess.getTableurAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColonne
entryRuleColonne
:
{ before(grammarAccess.getColonneRule()); }
	 ruleColonne
{ after(grammarAccess.getColonneRule()); } 
	 EOF 
;

// Rule Colonne
ruleColonne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColonneAccess().getAlternatives()); }
		(rule__Colonne__Alternatives)
		{ after(grammarAccess.getColonneAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColonneInput
entryRuleColonneInput
:
{ before(grammarAccess.getColonneInputRule()); }
	 ruleColonneInput
{ after(grammarAccess.getColonneInputRule()); } 
	 EOF 
;

// Rule ColonneInput
ruleColonneInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColonneInputAccess().getGroup()); }
		(rule__ColonneInput__Group__0)
		{ after(grammarAccess.getColonneInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColonneOutput
entryRuleColonneOutput
:
{ before(grammarAccess.getColonneOutputRule()); }
	 ruleColonneOutput
{ after(grammarAccess.getColonneOutputRule()); } 
	 EOF 
;

// Rule ColonneOutput
ruleColonneOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColonneOutputAccess().getGroup()); }
		(rule__ColonneOutput__Group__0)
		{ after(grammarAccess.getColonneOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Colonne__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColonneAccess().getColonneInputParserRuleCall_0()); }
		ruleColonneInput
		{ after(grammarAccess.getColonneAccess().getColonneInputParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getColonneAccess().getColonneOutputParserRuleCall_1()); }
		ruleColonneOutput
		{ after(grammarAccess.getColonneAccess().getColonneOutputParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableur__Group__0__Impl
	rule__Tableur__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableurAccess().getTableurKeyword_0()); }
	'tableur'
	{ after(grammarAccess.getTableurAccess().getTableurKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableur__Group__1__Impl
	rule__Tableur__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableurAccess().getNameAssignment_1()); }
	(rule__Tableur__NameAssignment_1)
	{ after(grammarAccess.getTableurAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableur__Group__2__Impl
	rule__Tableur__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableurAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTableurAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableur__Group__3__Impl
	rule__Tableur__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableurAccess().getTablesAssignment_3()); }
	(rule__Tableur__TablesAssignment_3)*
	{ after(grammarAccess.getTableurAccess().getTablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tableur__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableurAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTableurAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getTableKeyword_0()); }
	'table'
	{ after(grammarAccess.getTableAccess().getTableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
	(rule__Table__NameAssignment_1)
	{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColonnesAssignment_3()); }
	(rule__Table__ColonnesAssignment_3)*
	{ after(grammarAccess.getTableAccess().getColonnesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColonneInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColonneInput__Group__0__Impl
	rule__ColonneInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColonneInputAccess().getColonneInputKeyword_0()); }
	'colonneInput'
	{ after(grammarAccess.getColonneInputAccess().getColonneInputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColonneInput__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColonneInputAccess().getNameAssignment_1()); }
	(rule__ColonneInput__NameAssignment_1)
	{ after(grammarAccess.getColonneInputAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColonneOutput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColonneOutput__Group__0__Impl
	rule__ColonneOutput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneOutput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColonneOutputAccess().getColonneOutputKeyword_0()); }
	'colonneOutput'
	{ after(grammarAccess.getColonneOutputAccess().getColonneOutputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneOutput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColonneOutput__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneOutput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColonneOutputAccess().getNameAssignment_1()); }
	(rule__ColonneOutput__NameAssignment_1)
	{ after(grammarAccess.getColonneOutputAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tableur__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableurAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTableurAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tableur__TablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableurAccess().getTablesTableParserRuleCall_3_0()); }
		ruleTable
		{ after(grammarAccess.getTableurAccess().getTablesTableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColonnesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColonnesColonneParserRuleCall_3_0()); }
		ruleColonne
		{ after(grammarAccess.getTableAccess().getColonnesColonneParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneInput__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColonneInputAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getColonneInputAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColonneOutput__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
