/*
 * generated by Xtext 2.32.0
 */
grammar InternalTAB;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.TABGrammarAccess;

}

@parser::members {

 	private TABGrammarAccess grammarAccess;

    public InternalTABParser(TokenStream input, TABGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Tableur";
   	}

   	@Override
   	protected TABGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTableur
entryRuleTableur returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableurRule()); }
	iv_ruleTableur=ruleTableur
	{ $current=$iv_ruleTableur.current; }
	EOF;

// Rule Tableur
ruleTableur returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Tableur'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableurAccess().getTableurKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableurAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableurRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableurAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableurAccess().getTablesTableParserRuleCall_3_0());
				}
				lv_tables_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableurRule());
					}
					add(
						$current,
						"tables",
						lv_tables_3_0,
						"org.xtext.TAB.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTableurAccess().getCatalogueCatalogueParserRuleCall_4_0());
				}
				lv_catalogue_4_0=ruleCatalogue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableurRule());
					}
					add(
						$current,
						"catalogue",
						lv_catalogue_4_0,
						"org.xtext.TAB.Catalogue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTableurAccess().getScriptScriptParserRuleCall_5_0());
				}
				lv_script_5_0=ruleScript
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableurRule());
					}
					add(
						$current,
						"script",
						lv_script_5_0,
						"org.xtext.TAB.Script");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getTableurAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleColonne
entryRuleColonne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneRule()); }
	iv_ruleColonne=ruleColonne
	{ $current=$iv_ruleColonne.current; }
	EOF;

// Rule Colonne
ruleColonne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getColonneAccess().getColonneInputParserRuleCall_0());
		}
		this_ColonneInput_0=ruleColonneInput
		{
			$current = $this_ColonneInput_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getColonneAccess().getColonneOutputParserRuleCall_1());
		}
		this_ColonneOutput_1=ruleColonneOutput
		{
			$current = $this_ColonneOutput_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperateurUnaire
entryRuleOperateurUnaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperateurUnaireRule()); }
	iv_ruleOperateurUnaire=ruleOperateurUnaire
	{ $current=$iv_ruleOperateurUnaire.current; }
	EOF;

// Rule OperateurUnaire
ruleOperateurUnaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Operation'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperateurUnaireAccess().getOperationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperateurUnaireAccess().getKindOperationUnaireTypeEnumRuleCall_1_0());
				}
				lv_kind_1_0=ruleOperationUnaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperateurUnaireRule());
					}
					set(
						$current,
						"kind",
						lv_kind_1_0,
						"org.xtext.TAB.OperationUnaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperateurBinaire
entryRuleOperateurBinaire returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperateurBinaireRule()); }
	iv_ruleOperateurBinaire=ruleOperateurBinaire
	{ $current=$iv_ruleOperateurBinaire.current; }
	EOF;

// Rule OperateurBinaire
ruleOperateurBinaire returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Operation'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperateurBinaireAccess().getOperationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperateurBinaireAccess().getKindOperationBinaireTypeEnumRuleCall_1_0());
				}
				lv_kind_1_0=ruleOperationBinaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperateurBinaireRule());
					}
					set(
						$current,
						"kind",
						lv_kind_1_0,
						"org.xtext.TAB.OperationBinaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Table'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableAccess().getTableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getColonnesColonneParserRuleCall_3_0());
				}
				lv_colonnes_3_0=ruleColonne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"colonnes",
						lv_colonnes_3_0,
						"org.xtext.TAB.Colonne");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleColonneInput
entryRuleColonneInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneInputRule()); }
	iv_ruleColonneInput=ruleColonneInput
	{ $current=$iv_ruleColonneInput.current; }
	EOF;

// Rule ColonneInput
ruleColonneInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ColonneInput'
		{
			newLeafNode(otherlv_0, grammarAccess.getColonneInputAccess().getColonneInputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getColonneInputAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColonneInputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleColonneOutput
entryRuleColonneOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneOutputRule()); }
	iv_ruleColonneOutput=ruleColonneOutput
	{ $current=$iv_ruleColonneOutput.current; }
	EOF;

// Rule ColonneOutput
ruleColonneOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='ColonneOutput'
			{
				newLeafNode(otherlv_0, grammarAccess.getColonneOutputAccess().getColonneOutputKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColonneOutputRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getColonneOutputAccess().getLeftCurlyBracketKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColonneOutputAccess().getOperationsOperateurBinaireParserRuleCall_0_3_0());
					}
					lv_operations_3_0=ruleOperateurBinaire
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColonneOutputRule());
						}
						add(
							$current,
							"operations",
							lv_operations_3_0,
							"org.xtext.TAB.OperateurBinaire");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColonneOutputRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getColonneOutputAccess().getColonnesColonneCrossReference_0_4_0());
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColonneOutputRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getColonneOutputAccess().getColonnesColonneCrossReference_0_5_0());
					}
				)
			)
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getColonneOutputAccess().getRightCurlyBracketKeyword_0_6());
			}
		)
		    |
		(
			otherlv_7='ColonneOutput'
			{
				newLeafNode(otherlv_7, grammarAccess.getColonneOutputAccess().getColonneOutputKeyword_1_0());
			}
			(
				(
					lv_name_8_0=RULE_ID
					{
						newLeafNode(lv_name_8_0, grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColonneOutputRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_8_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getColonneOutputAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColonneOutputAccess().getOperationsOperateurUnaireParserRuleCall_1_3_0());
					}
					lv_operations_10_0=ruleOperateurUnaire
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColonneOutputRule());
						}
						add(
							$current,
							"operations",
							lv_operations_10_0,
							"org.xtext.TAB.OperateurUnaire");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColonneOutputRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getColonneOutputAccess().getColonnesColonneCrossReference_1_4_0());
					}
				)
			)
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getColonneOutputAccess().getRightCurlyBracketKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleCatalogue
entryRuleCatalogue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCatalogueRule()); }
	iv_ruleCatalogue=ruleCatalogue
	{ $current=$iv_ruleCatalogue.current; }
	EOF;

// Rule Catalogue
ruleCatalogue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Catalogue'
		{
			newLeafNode(otherlv_0, grammarAccess.getCatalogueAccess().getCatalogueKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCatalogueAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCatalogueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCatalogueAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCatalogueAccess().getAlgorithmesAlgorithmeParserRuleCall_3_0());
				}
				lv_algorithmes_3_0=ruleAlgorithme
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCatalogueRule());
					}
					add(
						$current,
						"algorithmes",
						lv_algorithmes_3_0,
						"org.xtext.TAB.Algorithme");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getCatalogueAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAlgorithme
entryRuleAlgorithme returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlgorithmeRule()); }
	iv_ruleAlgorithme=ruleAlgorithme
	{ $current=$iv_ruleAlgorithme.current; }
	EOF;

// Rule Algorithme
ruleAlgorithme returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Algorithme'
		{
			newLeafNode(otherlv_0, grammarAccess.getAlgorithmeAccess().getAlgorithmeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAlgorithmeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAlgorithmeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAlgorithmeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmeAccess().getEntreesEntreeParserRuleCall_3_0());
				}
				lv_entrees_3_0=ruleEntree
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmeRule());
					}
					add(
						$current,
						"entrees",
						lv_entrees_3_0,
						"org.xtext.TAB.Entree");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmeAccess().getSortiesSortieParserRuleCall_4_0());
				}
				lv_sorties_4_0=ruleSortie
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmeRule());
					}
					add(
						$current,
						"sorties",
						lv_sorties_4_0,
						"org.xtext.TAB.Sortie");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmeAccess().getDocumentationDocumentationParserRuleCall_5_0());
				}
				lv_documentation_5_0=ruleDocumentation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmeRule());
					}
					add(
						$current,
						"documentation",
						lv_documentation_5_0,
						"org.xtext.TAB.Documentation");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAlgorithmeAccess().getRessourceRessourceParserRuleCall_6_0());
				}
				lv_ressource_6_0=ruleRessource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAlgorithmeRule());
					}
					add(
						$current,
						"ressource",
						lv_ressource_6_0,
						"org.xtext.TAB.Ressource");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAlgorithmeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleEntree
entryRuleEntree returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntreeRule()); }
	iv_ruleEntree=ruleEntree
	{ $current=$iv_ruleEntree.current; }
	EOF;

// Rule Entree
ruleEntree returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Entrees'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntreeAccess().getEntreesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntreeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntreeAccess().getParametresParametreParserRuleCall_2_0());
				}
				lv_parametres_2_0=ruleParametre
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntreeRule());
					}
					add(
						$current,
						"parametres",
						lv_parametres_2_0,
						"org.xtext.TAB.Parametre");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntreeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSortie
entryRuleSortie returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortieRule()); }
	iv_ruleSortie=ruleSortie
	{ $current=$iv_ruleSortie.current; }
	EOF;

// Rule Sortie
ruleSortie returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sorties'
		{
			newLeafNode(otherlv_0, grammarAccess.getSortieAccess().getSortiesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSortieAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortieAccess().getParametresParametreParserRuleCall_2_0());
				}
				lv_parametres_2_0=ruleParametre
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortieRule());
					}
					add(
						$current,
						"parametres",
						lv_parametres_2_0,
						"org.xtext.TAB.Parametre");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSortieAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleParametre
entryRuleParametre returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametreRule()); }
	iv_ruleParametre=ruleParametre
	{ $current=$iv_ruleParametre.current; }
	EOF;

// Rule Parametre
ruleParametre returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParametreAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParametreRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParametreAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParametreAccess().getTypeTypePrimitifPythonEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleTypePrimitifPython
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametreRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.TAB.TypePrimitifPython");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDocumentationRule()); }
	iv_ruleDocumentation=ruleDocumentation
	{ $current=$iv_ruleDocumentation.current; }
	EOF;

// Rule Documentation
ruleDocumentation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Documentation'
		{
			newLeafNode(otherlv_0, grammarAccess.getDocumentationAccess().getDocumentationKeyword_0());
		}
		(
			(
				lv_texte_1_0=RULE_STRING
				{
					newLeafNode(lv_texte_1_0, grammarAccess.getDocumentationAccess().getTexteSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDocumentationRule());
					}
					setWithLastConsumed(
						$current,
						"texte",
						lv_texte_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleRessource
entryRuleRessource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRessourceRule()); }
	iv_ruleRessource=ruleRessource
	{ $current=$iv_ruleRessource.current; }
	EOF;

// Rule Ressource
ruleRessource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Ressource'
		{
			newLeafNode(otherlv_0, grammarAccess.getRessourceAccess().getRessourceKeyword_0());
		}
		(
			(
				lv_chemin_1_0=RULE_STRING
				{
					newLeafNode(lv_chemin_1_0, grammarAccess.getRessourceAccess().getCheminSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRessourceRule());
					}
					setWithLastConsumed(
						$current,
						"chemin",
						lv_chemin_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleScript
entryRuleScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptRule()); }
	iv_ruleScript=ruleScript
	{ $current=$iv_ruleScript.current; }
	EOF;

// Rule Script
ruleScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Script'
		{
			newLeafNode(otherlv_0, grammarAccess.getScriptAccess().getScriptKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScriptAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScriptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getScriptAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getEntreesEntreeScriptParserRuleCall_3_0());
				}
				lv_entrees_3_0=ruleEntreeScript
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"entrees",
						lv_entrees_3_0,
						"org.xtext.TAB.EntreeScript");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getSortiesSortieScriptParserRuleCall_4_0());
				}
				lv_sorties_4_0=ruleSortieScript
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"sorties",
						lv_sorties_4_0,
						"org.xtext.TAB.SortieScript");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScriptAccess().getCalculsCalculParserRuleCall_5_0());
				}
				lv_calculs_5_0=ruleCalcul
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScriptRule());
					}
					add(
						$current,
						"calculs",
						lv_calculs_5_0,
						"org.xtext.TAB.Calcul");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getScriptAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEntreeScript
entryRuleEntreeScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntreeScriptRule()); }
	iv_ruleEntreeScript=ruleEntreeScript
	{ $current=$iv_ruleEntreeScript.current; }
	EOF;

// Rule EntreeScript
ruleEntreeScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Entrees'
		{
			newLeafNode(otherlv_0, grammarAccess.getEntreeScriptAccess().getEntreesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEntreeScriptAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEntreeScriptAccess().getParametresParametreParserRuleCall_2_0());
				}
				lv_parametres_2_0=ruleParametre
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEntreeScriptRule());
					}
					add(
						$current,
						"parametres",
						lv_parametres_2_0,
						"org.xtext.TAB.Parametre");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getEntreeScriptAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSortieScript
entryRuleSortieScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortieScriptRule()); }
	iv_ruleSortieScript=ruleSortieScript
	{ $current=$iv_ruleSortieScript.current; }
	EOF;

// Rule SortieScript
ruleSortieScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sorties'
		{
			newLeafNode(otherlv_0, grammarAccess.getSortieScriptAccess().getSortiesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSortieScriptAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSortieScriptAccess().getParametresParametreParserRuleCall_2_0());
				}
				lv_parametres_2_0=ruleParametre
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortieScriptRule());
					}
					add(
						$current,
						"parametres",
						lv_parametres_2_0,
						"org.xtext.TAB.Parametre");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getSortieScriptAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleOperationScript
entryRuleOperationScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationScriptRule()); }
	iv_ruleOperationScript=ruleOperationScript
	{ $current=$iv_ruleOperationScript.current; }
	EOF;

// Rule OperationScript
ruleOperationScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationScriptAccess().getOperationUnaireScriptParserRuleCall_0());
		}
		this_OperationUnaireScript_0=ruleOperationUnaireScript
		{
			$current = $this_OperationUnaireScript_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationScriptAccess().getOperationBinaireScriptParserRuleCall_1());
		}
		this_OperationBinaireScript_1=ruleOperationBinaireScript
		{
			$current = $this_OperationBinaireScript_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleOperationUnaireScript
entryRuleOperationUnaireScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationUnaireScriptRule()); }
	iv_ruleOperationUnaireScript=ruleOperationUnaireScript
	{ $current=$iv_ruleOperationUnaireScript.current; }
	EOF;

// Rule OperationUnaireScript
ruleOperationUnaireScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationUnaireScriptAccess().getOperationOperateurUnaireTypeEnumRuleCall_0_0());
				}
				lv_operation_0_0=ruleOperateurUnaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationUnaireScriptRule());
					}
					set(
						$current,
						"operation",
						lv_operation_0_0,
						"org.xtext.TAB.OperateurUnaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationUnaireScriptAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationUnaireScriptAccess().getOperandsOperandParserRuleCall_2_0());
				}
				lv_operands_2_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationUnaireScriptRule());
					}
					add(
						$current,
						"operands",
						lv_operands_2_0,
						"org.xtext.TAB.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationUnaireScriptAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOperationBinaireScript
entryRuleOperationBinaireScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationBinaireScriptRule()); }
	iv_ruleOperationBinaireScript=ruleOperationBinaireScript
	{ $current=$iv_ruleOperationBinaireScript.current; }
	EOF;

// Rule OperationBinaireScript
ruleOperationBinaireScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireScriptAccess().getOperationOperateurBinaireTypeEnumRuleCall_0_0());
				}
				lv_operation_0_0=ruleOperateurBinaireType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireScriptRule());
					}
					set(
						$current,
						"operation",
						lv_operation_0_0,
						"org.xtext.TAB.OperateurBinaireType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOperationBinaireScriptAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireScriptAccess().getOperandOperandParserRuleCall_2_0());
				}
				lv_operand_2_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireScriptRule());
					}
					add(
						$current,
						"operand",
						lv_operand_2_0,
						"org.xtext.TAB.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getOperationBinaireScriptAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationBinaireScriptAccess().getOperandOperandParserRuleCall_4_0());
				}
				lv_operand_4_0=ruleOperand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationBinaireScriptRule());
					}
					add(
						$current,
						"operand",
						lv_operand_4_0,
						"org.xtext.TAB.Operand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getOperationBinaireScriptAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOperandAccess().getOperandAction_0_0(),
						$current);
				}
			)
			this_ID_1=RULE_ID
			{
				newLeafNode(this_ID_1, grammarAccess.getOperandAccess().getIDTerminalRuleCall_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOperandAccess().getOperandAction_1_0(),
						$current);
				}
			)
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getOperandAccess().getINTTerminalRuleCall_1_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getOperationScriptParserRuleCall_2());
		}
		this_OperationScript_4=ruleOperationScript
		{
			$current = $this_OperationScript_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCalcul
entryRuleCalcul returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCalculRule()); }
	iv_ruleCalcul=ruleCalcul
	{ $current=$iv_ruleCalcul.current; }
	EOF;

// Rule Calcul
ruleCalcul returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Calcul'
		{
			newLeafNode(otherlv_0, grammarAccess.getCalculAccess().getCalculKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCalculAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCalculAccess().getOperationOperationScriptParserRuleCall_2_0());
				}
				lv_Operation_2_0=ruleOperationScript
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCalculRule());
					}
					add(
						$current,
						"Operation",
						lv_Operation_2_0,
						"org.xtext.TAB.OperationScript");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getCalculAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Rule OperationUnaireType
ruleOperationUnaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='Oppose'
		{
			$current = grammarAccess.getOperationUnaireTypeAccess().getOpposeEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getOperationUnaireTypeAccess().getOpposeEnumLiteralDeclaration());
		}
	)
;

// Rule OperationBinaireType
ruleOperationBinaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Addition'
			{
				$current = grammarAccess.getOperationBinaireTypeAccess().getAdditionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperationBinaireTypeAccess().getAdditionEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Soustraction'
			{
				$current = grammarAccess.getOperationBinaireTypeAccess().getSoustractionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperationBinaireTypeAccess().getSoustractionEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Multiplication'
			{
				$current = grammarAccess.getOperationBinaireTypeAccess().getMultiplicationEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperationBinaireTypeAccess().getMultiplicationEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Division'
			{
				$current = grammarAccess.getOperationBinaireTypeAccess().getDivisionEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperationBinaireTypeAccess().getDivisionEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule TypePrimitifPython
ruleTypePrimitifPython returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getTypePrimitifPythonAccess().getIntEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypePrimitifPythonAccess().getIntEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='float'
			{
				$current = grammarAccess.getTypePrimitifPythonAccess().getFloatEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypePrimitifPythonAccess().getFloatEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='str'
			{
				$current = grammarAccess.getTypePrimitifPythonAccess().getStrEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypePrimitifPythonAccess().getStrEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='bool'
			{
				$current = grammarAccess.getTypePrimitifPythonAccess().getBoolEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTypePrimitifPythonAccess().getBoolEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='list'
			{
				$current = grammarAccess.getTypePrimitifPythonAccess().getListEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTypePrimitifPythonAccess().getListEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule OperateurBinaireType
ruleOperateurBinaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Add'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperateurBinaireTypeAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Sub'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperateurBinaireTypeAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Tim'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getTIMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperateurBinaireTypeAccess().getTIMEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Div'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getDIVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperateurBinaireTypeAccess().getDIVEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Min'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOperateurBinaireTypeAccess().getMINEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Max'
			{
				$current = grammarAccess.getOperateurBinaireTypeAccess().getMAXEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOperateurBinaireTypeAccess().getMAXEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule OperateurUnaireType
ruleOperateurUnaireType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Opp'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getOPPEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperateurUnaireTypeAccess().getOPPEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Inv'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getINVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperateurUnaireTypeAccess().getINVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Cos'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getCOSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperateurUnaireTypeAccess().getCOSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Sin'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getSINEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperateurUnaireTypeAccess().getSINEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Sqr'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getSQREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOperateurUnaireTypeAccess().getSQREnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Exp'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getEXPEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOperateurUnaireTypeAccess().getEXPEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Log'
			{
				$current = grammarAccess.getOperateurUnaireTypeAccess().getLOGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getOperateurUnaireTypeAccess().getLOGEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
