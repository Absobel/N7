/*
 * generated by Xtext 2.32.0
 */
grammar InternalTAB;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.TABGrammarAccess;

}

@parser::members {

 	private TABGrammarAccess grammarAccess;

    public InternalTABParser(TokenStream input, TABGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Tableur";
   	}

   	@Override
   	protected TABGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTableur
entryRuleTableur returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableurRule()); }
	iv_ruleTableur=ruleTableur
	{ $current=$iv_ruleTableur.current; }
	EOF;

// Rule Tableur
ruleTableur returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='tableur'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableurAccess().getTableurKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableurAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableurRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableurAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableurAccess().getTablesTableParserRuleCall_3_0());
				}
				lv_tables_3_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableurRule());
					}
					add(
						$current,
						"tables",
						lv_tables_3_0,
						"org.xtext.TAB.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTableurAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleColonne
entryRuleColonne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneRule()); }
	iv_ruleColonne=ruleColonne
	{ $current=$iv_ruleColonne.current; }
	EOF;

// Rule Colonne
ruleColonne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getColonneAccess().getColonneInputParserRuleCall_0());
		}
		this_ColonneInput_0=ruleColonneInput
		{
			$current = $this_ColonneInput_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getColonneAccess().getColonneOutputParserRuleCall_1());
		}
		this_ColonneOutput_1=ruleColonneOutput
		{
			$current = $this_ColonneOutput_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='table'
		{
			newLeafNode(otherlv_0, grammarAccess.getTableAccess().getTableKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getTableAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getColonnesColonneParserRuleCall_3_0());
				}
				lv_colonnes_3_0=ruleColonne
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"colonnes",
						lv_colonnes_3_0,
						"org.xtext.TAB.Colonne");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTableAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleColonneInput
entryRuleColonneInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneInputRule()); }
	iv_ruleColonneInput=ruleColonneInput
	{ $current=$iv_ruleColonneInput.current; }
	EOF;

// Rule ColonneInput
ruleColonneInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='colonneInput'
		{
			newLeafNode(otherlv_0, grammarAccess.getColonneInputAccess().getColonneInputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getColonneInputAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColonneInputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleColonneOutput
entryRuleColonneOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColonneOutputRule()); }
	iv_ruleColonneOutput=ruleColonneOutput
	{ $current=$iv_ruleColonneOutput.current; }
	EOF;

// Rule ColonneOutput
ruleColonneOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='colonneOutput'
		{
			newLeafNode(otherlv_0, grammarAccess.getColonneOutputAccess().getColonneOutputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColonneOutputRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
