/*
 * generated by Xtext 2.32.0
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.TABGrammarAccess;
import org.xtext.tAB.ColonneInput;
import org.xtext.tAB.ColonneOutput;
import org.xtext.tAB.TABPackage;
import org.xtext.tAB.Table;
import org.xtext.tAB.Tableur;

@SuppressWarnings("all")
public class TABSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TABGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TABPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TABPackage.COLONNE_INPUT:
				sequence_ColonneInput(context, (ColonneInput) semanticObject); 
				return; 
			case TABPackage.COLONNE_OUTPUT:
				sequence_ColonneOutput(context, (ColonneOutput) semanticObject); 
				return; 
			case TABPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case TABPackage.TABLEUR:
				sequence_Tableur(context, (Tableur) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns ColonneInput
	 *     ColonneInput returns ColonneInput
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_ColonneInput(ISerializationContext context, ColonneInput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TABPackage.Literals.COLONNE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TABPackage.Literals.COLONNE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneInputAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Colonne returns ColonneOutput
	 *     ColonneOutput returns ColonneOutput
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_ColonneOutput(ISerializationContext context, ColonneOutput semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TABPackage.Literals.COLONNE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TABPackage.Literals.COLONNE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColonneOutputAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID colonnes+=Colonne*)
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tableur returns Tableur
	 *
	 * Constraint:
	 *     (name=ID tables+=Table*)
	 * </pre>
	 */
	protected void sequence_Tableur(ISerializationContext context, Tableur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
