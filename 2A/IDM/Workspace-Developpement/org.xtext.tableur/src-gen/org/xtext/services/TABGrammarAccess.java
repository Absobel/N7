/*
 * generated by Xtext 2.32.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TABGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TableurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.TAB.Tableur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTablesTableParserRuleCall_3_0 = (RuleCall)cTablesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Tableur : 'tableur' name=ID '{'
		//    tables+=Table*
		//    '}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'tableur' name=ID '{'
		//   tables+=Table*
		//   '}'
		public Group getGroup() { return cGroup; }
		
		//'tableur'
		public Keyword getTableurKeyword_0() { return cTableurKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//tables+=Table*
		public Assignment getTablesAssignment_3() { return cTablesAssignment_3; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_3_0() { return cTablesTableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ColonneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.TAB.Colonne");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonneInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColonneOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Colonne : ColonneInput | ColonneOutput;
		@Override public ParserRule getRule() { return rule; }
		
		//ColonneInput | ColonneOutput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColonneInput
		public RuleCall getColonneInputParserRuleCall_0() { return cColonneInputParserRuleCall_0; }
		
		//ColonneOutput
		public RuleCall getColonneOutputParserRuleCall_1() { return cColonneOutputParserRuleCall_1; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.TAB.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColonnesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColonnesColonneParserRuleCall_3_0 = (RuleCall)cColonnesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Table : 'table' name=ID '{'
		//    colonnes+=Colonne*
		//        '}'
		//        ;
		@Override public ParserRule getRule() { return rule; }
		
		//'table' name=ID '{'
		//   colonnes+=Colonne*
		//       '}'
		public Group getGroup() { return cGroup; }
		
		//'table'
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//colonnes+=Colonne*
		public Assignment getColonnesAssignment_3() { return cColonnesAssignment_3; }
		
		//Colonne
		public RuleCall getColonnesColonneParserRuleCall_3_0() { return cColonnesColonneParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ColonneInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.TAB.ColonneInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonneInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ColonneInput : 'colonneInput' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'colonneInput' name=ID
		public Group getGroup() { return cGroup; }
		
		//'colonneInput'
		public Keyword getColonneInputKeyword_0() { return cColonneInputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ColonneOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.TAB.ColonneOutput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonneOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ColonneOutput : 'colonneOutput' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'colonneOutput' name=ID
		public Group getGroup() { return cGroup; }
		
		//'colonneOutput'
		public Keyword getColonneOutputKeyword_0() { return cColonneOutputKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final TableurElements pTableur;
	private final ColonneElements pColonne;
	private final TableElements pTable;
	private final ColonneInputElements pColonneInput;
	private final ColonneOutputElements pColonneOutput;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TABGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTableur = new TableurElements();
		this.pColonne = new ColonneElements();
		this.pTable = new TableElements();
		this.pColonneInput = new ColonneInputElements();
		this.pColonneOutput = new ColonneOutputElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.TAB".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Tableur : 'tableur' name=ID '{'
	//    tables+=Table*
	//    '}'
	//    ;
	public TableurElements getTableurAccess() {
		return pTableur;
	}
	
	public ParserRule getTableurRule() {
		return getTableurAccess().getRule();
	}
	
	//Colonne : ColonneInput | ColonneOutput;
	public ColonneElements getColonneAccess() {
		return pColonne;
	}
	
	public ParserRule getColonneRule() {
		return getColonneAccess().getRule();
	}
	
	//Table : 'table' name=ID '{'
	//    colonnes+=Colonne*
	//        '}'
	//        ;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//ColonneInput : 'colonneInput' name=ID;
	public ColonneInputElements getColonneInputAccess() {
		return pColonneInput;
	}
	
	public ParserRule getColonneInputRule() {
		return getColonneInputAccess().getRule();
	}
	
	//ColonneOutput : 'colonneOutput' name=ID;
	public ColonneOutputElements getColonneOutputAccess() {
		return pColonneOutput;
	}
	
	public ParserRule getColonneOutputRule() {
		return getColonneOutputAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
