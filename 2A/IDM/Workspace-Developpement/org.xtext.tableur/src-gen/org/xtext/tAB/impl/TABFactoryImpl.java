/**
 * generated by Xtext 2.32.0
 */
package org.xtext.tAB.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.tAB.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TABFactoryImpl extends EFactoryImpl implements TABFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TABFactory init()
  {
    try
    {
      TABFactory theTABFactory = (TABFactory)EPackage.Registry.INSTANCE.getEFactory(TABPackage.eNS_URI);
      if (theTABFactory != null)
      {
        return theTABFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TABFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TABFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TABPackage.TABLEUR: return createTableur();
      case TABPackage.COLONNE: return createColonne();
      case TABPackage.OPERATION: return createOperation();
      case TABPackage.OPERATION_UNAIRE: return createOperationUnaire();
      case TABPackage.OPERATION_BINAIRE: return createOperationBinaire();
      case TABPackage.TABLE: return createTable();
      case TABPackage.COLONNE_INPUT: return createColonneInput();
      case TABPackage.COLONNE_OUTPUT: return createColonneOutput();
      case TABPackage.CATALOGUE: return createCatalogue();
      case TABPackage.ALGORITHME: return createAlgorithme();
      case TABPackage.ENTREE: return createEntree();
      case TABPackage.SORTIE: return createSortie();
      case TABPackage.PARAMETRE: return createParametre();
      case TABPackage.DOCUMENTATION: return createDocumentation();
      case TABPackage.RESSOURCE: return createRessource();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TABPackage.OPERATION_UNAIRE_TYPE:
        return createOperationUnaireTypeFromString(eDataType, initialValue);
      case TABPackage.OPERATION_BINAIRE_TYPE:
        return createOperationBinaireTypeFromString(eDataType, initialValue);
      case TABPackage.TYPE_PRIMITIF_PYTHON:
        return createTypePrimitifPythonFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case TABPackage.OPERATION_UNAIRE_TYPE:
        return convertOperationUnaireTypeToString(eDataType, instanceValue);
      case TABPackage.OPERATION_BINAIRE_TYPE:
        return convertOperationBinaireTypeToString(eDataType, instanceValue);
      case TABPackage.TYPE_PRIMITIF_PYTHON:
        return convertTypePrimitifPythonToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tableur createTableur()
  {
    TableurImpl tableur = new TableurImpl();
    return tableur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Colonne createColonne()
  {
    ColonneImpl colonne = new ColonneImpl();
    return colonne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationUnaire createOperationUnaire()
  {
    OperationUnaireImpl operationUnaire = new OperationUnaireImpl();
    return operationUnaire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationBinaire createOperationBinaire()
  {
    OperationBinaireImpl operationBinaire = new OperationBinaireImpl();
    return operationBinaire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Table createTable()
  {
    TableImpl table = new TableImpl();
    return table;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColonneInput createColonneInput()
  {
    ColonneInputImpl colonneInput = new ColonneInputImpl();
    return colonneInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColonneOutput createColonneOutput()
  {
    ColonneOutputImpl colonneOutput = new ColonneOutputImpl();
    return colonneOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Catalogue createCatalogue()
  {
    CatalogueImpl catalogue = new CatalogueImpl();
    return catalogue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Algorithme createAlgorithme()
  {
    AlgorithmeImpl algorithme = new AlgorithmeImpl();
    return algorithme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entree createEntree()
  {
    EntreeImpl entree = new EntreeImpl();
    return entree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sortie createSortie()
  {
    SortieImpl sortie = new SortieImpl();
    return sortie;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parametre createParametre()
  {
    ParametreImpl parametre = new ParametreImpl();
    return parametre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Documentation createDocumentation()
  {
    DocumentationImpl documentation = new DocumentationImpl();
    return documentation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ressource createRessource()
  {
    RessourceImpl ressource = new RessourceImpl();
    return ressource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationUnaireType createOperationUnaireTypeFromString(EDataType eDataType, String initialValue)
  {
    OperationUnaireType result = OperationUnaireType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperationUnaireTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OperationBinaireType createOperationBinaireTypeFromString(EDataType eDataType, String initialValue)
  {
    OperationBinaireType result = OperationBinaireType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOperationBinaireTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypePrimitifPython createTypePrimitifPythonFromString(EDataType eDataType, String initialValue)
  {
    TypePrimitifPython result = TypePrimitifPython.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypePrimitifPythonToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TABPackage getTABPackage()
  {
    return (TABPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TABPackage getPackage()
  {
    return TABPackage.eINSTANCE;
  }

} //TABFactoryImpl
